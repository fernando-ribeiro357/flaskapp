{
	"info": {
		"_postman_id": "a8fc644e-a4e3-43a4-ae24-b87b6064a36d",
		"name": "flaskapp",
		"description": "API desenvolvida em Python com Flask e token JWT implementando um CRUD simples.\n\nA API trabalha com dois tokens:\n\n- refresh_token: Token obtido ao validar 'username' e 'password' no banco de dados. É utilizado para solicitar um access_token para que possa utilizar as demais rotas. Este token tem a duração muito grande (3000 minutos)\n    \n- access_token: Token obtido com o refresh_token para que possa realizar as operações CRUD na API. Este token tem a duração bem curta (5 minutos), pois a cada acesso a uma rota, um novo access_token deve ser solicitado.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7590816"
	},
	"item": [
		{
			"name": "auth_refresh_token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Envia username e password para serem validados e retornar um refresh_token",
							"pm.test(\"auth refresh token\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    // Caso a resposta seja 'ACK' = True (usuário e senha corretos), ",
							"    // virá um token na resposta que é salvo na variável do environment (flaskapp)",
							"    pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"refresh_token\", jsonData.token);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint}}/api/v1/auth",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"api",
						"v1",
						"auth"
					]
				},
				"description": "Autenticação do usuário. Retorna o refresh_token."
			},
			"response": [
				{
					"name": "auth_refresh_token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/v1/auth",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"v1",
								"auth"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "get_profile_data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {",
							"    // Solicita um access_token:",
							"    const response = await pm.sendRequest({        ",
							"        url: \"http://localhost:8000/api/v1/auth/get_access_token\",",
							"        method: \"GET\",",
							"        // utilizando o refresh_token obtido no login",
							"        header: {",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"refresh_token\")",
							"        }",
							"    });",
							"",
							"    var jsonData = response.json();",
							"    // console.log(jsonData);",
							"",
							"    // caso a resposta seja 'ACK' = True, salva o access_token na variável do environment (flaskapp)",
							"    pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"access_token\", jsonData.token);",
							"    ",
							"",
							"} catch (err) {",
							"    console.error(err);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<style type=\"text/css\">",
							"    *{",
							"        font-family: Arial, sans-serif;",
							"    }",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"    div.alert{padding: 0px 12px; border: 1px solid; font-weight: 600; font-size: 14px }",
							"    div.success{ border-color: #0f0; background-color: #88ff88; color: #008500 }",
							"    div.error{ border-color: #f00; background-color: #ff8888; color: #850000 }",
							"</style>",
							"",
							"{{#if response.ACK}}",
							"    {{#if response.message}}",
							"        <div class=\"alert success\"><p>{{response.message}}</p></div>",
							"    {{/if}}",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Nome</th>",
							"        <th>Login</th>",
							"        <th>Email</th>",
							"        <th>Perfil</th>",
							"        <th>Criado em</th>",
							"        <th>Atualizado em</th>",
							"        <th>Excluído em</th>",
							"    </tr>",
							"    ",
							"    {{#each response.data}}",
							"        <tr>",
							"            <td>{{name}}</td>",
							"            <td>{{username}}</td>",
							"            <td>{{email}}</td>",
							"            <td>{{profile}}</td>",
							"            <td>{{created_at}}</td>",
							"            <td>{{#if updated_at}}{{updated_at}}{{else}}[NULL]{{/if}}</td>",
							"            <td>{{#if deleted_at}}{{deleted_at}}{{else}}[NULL]{{/if}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"{{else}}",
							"    <div class=\"alert error\"><p>{{response.message}}</p></div>",
							"{{/if}}",
							"`;",
							"",
							"function constructVisualizerPayload() {    ",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{endpoint}}/api/v1/get_profile_data",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"api",
						"v1",
						"get_profile_data"
					]
				},
				"description": "Busca o perfil do usuário logado, solicitando um access_token antes da requisição."
			},
			"response": [
				{
					"name": "get_profile_data",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/v1/get_profile_data",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"v1",
								"get_profile_data"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "get_profiles",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {",
							"    // Solicita um access_token:",
							"    const response = await pm.sendRequest({        ",
							"        url: \"http://localhost:8000/api/v1/auth/get_access_token\",",
							"        method: \"GET\",",
							"        // utilizando o refresh_token obtido no login",
							"        header: {",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"refresh_token\")",
							"        }",
							"    });",
							"",
							"    var jsonData = response.json();",
							"    console.log(jsonData);",
							"",
							"    // caso a resposta seja 'ACK' = True, salva o access_token na variável do environment (flaskapp)",
							"    pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"access_token\", jsonData.token);",
							"    ",
							"",
							"} catch (err) {",
							"    console.error(err);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<style type=\"text/css\">",
							"    *{",
							"        font-family: Arial, sans-serif;",
							"    }",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"    div.alert{padding: 0px 12px; border: 1px solid; font-weight: 600; font-size: 14px }",
							"    div.success{ border-color: #0f0; background-color: #88ff88; color: #008500 }",
							"    div.error{ border-color: #f00; background-color: #ff8888; color: #850000 }",
							"</style>",
							"",
							"{{#if response.ACK}}",
							"    {{#if response.message}}",
							"        <div class=\"alert success\"><p>{{response.message}}</p></div>",
							"    {{/if}}",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Nome</th>",
							"        <th>Login</th>",
							"        <th>Email</th>",
							"        <th>Perfil</th>",
							"        <th>Criado em</th>",
							"        <th>Atualizado em</th>",
							"        <th>Excluído em</th>",
							"    </tr>",
							"    ",
							"    {{#each response.data}}",
							"        <tr>",
							"            <td>{{name}}</td>",
							"            <td>{{username}}</td>",
							"            <td>{{email}}</td>",
							"            <td>{{profile}}</td>",
							"            <td>{{created_at}}</td>",
							"            <td>{{#if updated_at}}{{updated_at}}{{else}}[NULL]{{/if}}</td>",
							"            <td>{{#if deleted_at}}{{deleted_at}}{{else}}[NULL]{{/if}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"{{else}}",
							"    <div class=\"alert error\"><p>{{response.message}}</p></div>",
							"{{/if}}",
							"`;",
							"",
							"function constructVisualizerPayload() {    ",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{endpoint}}/api/v1/get_profiles",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"api",
						"v1",
						"get_profiles"
					]
				},
				"description": "Busca todos os perfis não excluídos (created_at: None), solicitando um access_token antes da requisição.\n\nSomente os usuários com perfil administrativo (profile: sysadmin) podem executar essa ação."
			},
			"response": []
		},
		{
			"name": "insert_profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {",
							"    // Solicita um access_token:",
							"    const response = await pm.sendRequest({        ",
							"        url: \"http://localhost:8000/api/v1/auth/get_access_token\",",
							"        method: \"GET\",",
							"        // utilizando o refresh_token obtido no login",
							"        header: {",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"refresh_token\")",
							"        }",
							"    });",
							"",
							"    var jsonData = response.json();",
							"    // console.log(jsonData);",
							"",
							"    // caso a resposta seja 'ACK' = True, salva o access_token na variável do environment (flaskapp)",
							"    pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"access_token\", jsonData.token);",
							"    ",
							"",
							"} catch (err) {",
							"    console.error(err);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<style type=\"text/css\">",
							"    *{",
							"        font-family: Arial, sans-serif;",
							"    }",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"    div.alert{padding: 0px 12px; border: 1px solid; font-weight: 600; font-size: 14px }",
							"    div.success{ border-color: #0f0; background-color: #88ff88; color: #008500 }",
							"    div.error{ border-color: #f00; background-color: #ff8888; color: #850000 }",
							"</style>",
							"",
							"{{#if response.ACK}}",
							"    {{#if response.message}}",
							"        <div class=\"alert success\"><p>{{response.message}}</p></div>",
							"    {{/if}}",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Nome</th>",
							"        <th>Login</th>",
							"        <th>Email</th>",
							"        <th>Senha</th>",
							"        <th>Perfil</th>",
							"        <th>Criado em</th>",
							"        <th>Atualizado em</th>",
							"        <th>Excluído em</th>",
							"    </tr>",
							"    ",
							"    {{#each response.data}}",
							"        <tr>",
							"            <td>{{name}}</td>",
							"            <td>{{username}}</td>",
							"            <td>{{email}}</td>",
							"            <td>{{password}}</td>",
							"            <td>{{profile}}</td>",
							"            <td>{{created_at}}</td>",
							"            <td>{{#if updated_at}}{{updated_at}}{{else}}[NULL]{{/if}}</td>",
							"            <td>{{#if deleted_at}}{{deleted_at}}{{else}}[NULL]{{/if}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"{{else}}",
							"    <div class=\"alert error\"><p>{{response.message}}</p></div>",
							"{{/if}}",
							"`;",
							"",
							"function constructVisualizerPayload() {    ",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Fulano Ciclano\",\n    \"username\": \"fulano\",\n    \"password\": \"senha123\",\n    \"profile\": \"sysadmin\",\n    \"email\": \"fulano@flaskapp.local\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint}}/api/v1/insert_profile",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"api",
						"v1",
						"insert_profile"
					]
				},
				"description": "Insere um novo perfi de usuário (profile: user), solicitando um access_token antes da requisição.\n\nSomente os usuários com perfil administrativo (profile: sysadmin) podem executar essa ação."
			},
			"response": [
				{
					"name": "insert_profile",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fulano Ciclano\",\n    \"username\": \"fulano\",\n    \"password\": \"senha123\",\n    \"profile\": \"sysadmin\",\n    \"email\": \"fulano@flaskapp.local\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/v1/insert_profile",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"v1",
								"insert_profile"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "update_profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {",
							"    // Solicita um access_token:",
							"    const response = await pm.sendRequest({        ",
							"        url: \"http://localhost:8000/api/v1/auth/get_access_token\",",
							"        method: \"GET\",",
							"        // utilizando o refresh_token obtido no login",
							"        header: {",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"refresh_token\")",
							"        }",
							"    });",
							"",
							"    var jsonData = response.json();",
							"    // console.log(jsonData);",
							"",
							"    // caso a resposta seja 'ACK' = True, salva o access_token na variável do environment (flaskapp)",
							"    pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"access_token\", jsonData.token);",
							"    ",
							"",
							"} catch (err) {",
							"    console.error(err);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<style type=\"text/css\">",
							"    *{",
							"        font-family: Arial, sans-serif;",
							"    }",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"    div.alert{padding: 0px 12px; border: 1px solid; font-weight: 600; font-size: 14px }",
							"    div.success{ border-color: #0f0; background-color: #88ff88; color: #008500 }",
							"    div.error{ border-color: #f00; background-color: #ff8888; color: #850000 }",
							"</style>",
							"",
							"{{#if response.ACK}}",
							"    {{#if response.message}}",
							"        <div class=\"alert success\"><p>{{response.message}}</p></div>",
							"    {{/if}}",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Nome</th>",
							"        <th>Login</th>",
							"        <th>Email</th>",
							"        <th>Senha</th>",
							"        <th>Perfil</th>",
							"        <th>Criado em</th>",
							"        <th>Atualizado em</th>",
							"        <th>Excluído em</th>",
							"    </tr>",
							"    ",
							"    {{#each response.data}}",
							"        <tr>",
							"            <td>{{name}}</td>",
							"            <td>{{username}}</td>",
							"            <td>{{email}}</td>",
							"            <td>{{password}}</td>",
							"            <td>{{profile}}</td>",
							"            <td>{{created_at}}</td>",
							"            <td>{{#if updated_at}}{{updated_at}}{{else}}[NULL]{{/if}}</td>",
							"            <td>{{#if deleted_at}}{{deleted_at}}{{else}}[NULL]{{/if}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"{{else}}",
							"    <div class=\"alert error\"><p>{{response.message}}</p></div>",
							"{{/if}}",
							"`;",
							"",
							"function constructVisualizerPayload() {    ",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \n    \"name\": \"Fulano Silva Ciclano\",\n    \"profile\": \"user\",\n    \"username\": \"fulano\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint}}/api/v1/update_profile",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"api",
						"v1",
						"update_profile"
					]
				},
				"description": "Atualiza os dados de um perfil (created_at: None), solicitando um access_token antes da requisição.\n\nSomente os usuários com perfil administrativo (profile: sysadmin) ou o dono do perfil a ser alterado podem executar essa ação.\n\nO campo 'username' não pode ser alterado.\n\nSomente os usuários com perfil administrativo podem alterar o campo 'profile', exceto o seu próprio perfil."
			},
			"response": [
				{
					"name": "update_profile",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \n    \"name\": \"Fulano Silva Ciclano\",\n    \"profile\": \"user\",\n    \"username\": \"fulano\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/v1/update_profile",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"v1",
								"update_profile"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "delete_profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {",
							"    // Solicita um access_token:",
							"    const response = await pm.sendRequest({        ",
							"        url: \"http://localhost:8000/api/v1/auth/get_access_token\",",
							"        method: \"GET\",",
							"        // utilizando o refresh_token obtido no login",
							"        header: {",
							"            \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"refresh_token\")",
							"        }",
							"    });",
							"",
							"    var jsonData = response.json();",
							"    // console.log(jsonData);",
							"",
							"    // caso a resposta seja 'ACK' = True, salva o access_token na variável do environment (flaskapp)",
							"    pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"access_token\", jsonData.token);",
							"    ",
							"",
							"} catch (err) {",
							"    console.error(err);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<style type=\"text/css\">",
							"    *{",
							"        font-family: Arial, sans-serif;",
							"    }",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"    div.alert{padding: 0px 12px; border: 1px solid; font-weight: 600; font-size: 14px }",
							"    div.success{ border-color: #0f0; background-color: #88ff88; color: #008500 }",
							"    div.error{ border-color: #f00; background-color: #ff8888; color: #850000 }",
							"</style>",
							"",
							"{{#if response.ACK}}",
							"    {{#if response.message}}",
							"        <div class=\"alert success\"><p>{{response.message}}</p></div>",
							"    {{/if}}",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Nome</th>",
							"        <th>Login</th>",
							"        <th>Email</th>",
							"        <th>Senha</th>",
							"        <th>Perfil</th>",
							"        <th>Criado em</th>",
							"        <th>Atualizado em</th>",
							"        <th>Excluído em</th>",
							"    </tr>",
							"    ",
							"    {{#each response.data}}",
							"        <tr>",
							"            <td>{{name}}</td>",
							"            <td>{{username}}</td>",
							"            <td>{{email}}</td>",
							"            <td>{{password}}</td>",
							"            <td>{{profile}}</td>",
							"            <td>{{created_at}}</td>",
							"            <td>{{#if updated_at}}{{updated_at}}{{else}}[NULL]{{/if}}</td>",
							"            <td>{{#if deleted_at}}{{deleted_at}}{{else}}[NULL]{{/if}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"{{else}}",
							"    <div class=\"alert error\"><p>{{response.message}}</p></div>",
							"{{/if}}",
							"`;",
							"",
							"function constructVisualizerPayload() {    ",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"fulano\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{endpoint}}/api/v1/delete_profile",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"api",
						"v1",
						"delete_profile"
					]
				},
				"description": "Exclui um perfil (deleted_at: datetime.utcnow()), solicitando um access_token antes da requisição.\n\nSomente os usuários com perfil administrativo (profile: sysadmin) podem executar essa ação.\n\nUm usuário não pode excluir o próprio perfil."
			},
			"response": [
				{
					"name": "delete_profile",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"fulano\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/v1/delete_profile",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"v1",
								"delete_profile"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "auth_access_token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"auth access token\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"access_token\", jsonData.token);",
							"",
							"     pm.expect(jsonData.ACK).true;",
							"    pm.collectionVariables.set(\"access_token\", jsonData.token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{refresh_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{endpoint}}/api/v1/auth/get_access_token",
					"host": [
						"{{endpoint}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"get_access_token"
					]
				},
				"description": "Solicita um access_token, fornecendo um refresh_token, para realizar as operações CRUD na API."
			},
			"response": [
				{
					"name": "auth_access_token",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/api/v1/auth/get_access_token",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"get_access_token"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		}
	],
	"auth": {
		"type": "inherit"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "endpoint",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "username",
			"value": "fernando",
			"type": "string"
		},
		{
			"key": "password",
			"value": "senha123",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "version",
			"value": "v2.1",
			"type": "string"
		},
		{
			"key": "tag",
			"value": "develop",
			"type": "string"
		}
	]
}